 # include <iostream.h>
 # include <graphics.h>
 # include    <conio.h>
 # include     <math.h>

 # define  f                 0.3
 # define  projection_angle   45

 void show_screen( );

 void Bezier_curve(const int [4][3]);

 double nCr(int,int);
 double factorial(int);

 void get_projected_point(float&,float&,float&);
 void multiply_matrices(const float[4],const float[4][4],float[4]);

 void Dashed_line(const int,const int,const int,const int,const int=0);


 int main( )
    {
       int driver=VGA;
       int mode=VGAHI;

       int control_points[4][3]={0};

       do
      {
         show_screen( );

         for(int count=0;count<=3;count++)
        {
           gotoxy(8,10);
           cout<<\"Coordinates of Point-\"<<count<<\" (x\"<<count<<\",y\"<<count<<\",z\"<<count<<\") :\";

           gotoxy(8,11);
           cout<<\"อออออออออออออออออออออออออออออออออออ\";

           gotoxy(12,13);
           cout<<\"Enter the value of x\"<<count<<\" = \";
           cin>>control_points[count][0];

           gotoxy(12,15);
           cout<<\"Enter the value of y\"<<count<<\" = \";
           cin>>control_points[count][1];

           gotoxy(12,17);
           cout<<\"Enter the value of z\"<<count<<\" = \";
           cin>>control_points[count][2];

           gotoxy(8,10);
           cout<<\"                                            \";

           gotoxy(12,13);
           cout<<\"                                            \";

           gotoxy(12,15);
           cout<<\"                                            \";

           gotoxy(12,17);
           cout<<\"                                            \";
         }

         initgraph(&driver,&mode,\"..\\\\Bgi\");

         setcolor(15);
           Bezier_curve(control_points);

         setcolor(15);
           outtextxy(110,460,\"Press <Enter> to continue or any other key to exit.\");

         int key=int(getch( ));

         if(key!=13)
        break;
      }
       while(1);

       return 0;
    }


 //--------------------------  Bezier_curve( )  --------------------------//


 void Bezier_curve(const int cp[4][3])
    {
       int color=getcolor( );

       setcolor(7);

       float x_1;
       float y_1;
       float z_1;
       float x_2;
       float y_2;
       float z_2;

       for(int count=0;count<3;count++)
      {
         x_1=cp[count][0];
         y_1=cp[count][1];
         z_1=cp[count][2];
         x_2=cp[(count+1)][0];
         y_2=cp[(count+1)][1];
         z_2=cp[(count+1)][2];

         get_projected_point(x_1,y_1,z_1);
         get_projected_point(x_2,y_2,z_2);

         Dashed_line((int)(x_1+0.5),(int)(y_1+0.5),
                         (int)(x_2+0.5),(int)(y_2+0.5));
      }

       float x;
       float y;
       float z;

       for(float u=0.0005;u<=1;u+=0.0005)
      {
         x=0;
         y=0;
         z=0;

         for(int k=0;k<=3;k++)
        {
           x+=(cp[k][0]*nCr(3,k)*pow(u,k)*powl((1-u),(3-k)));
           y+=(cp[k][1]*nCr(3,k)*pow(u,k)*powl((1-u),(3-k)));
           z+=(cp[k][2]*nCr(3,k)*pow(u,k)*powl((1-u),(3-k)));
        }

         get_projected_point(x,y,z);

         putpixel((int)(x+0.5),(int)(y+0.5),color);
      }
    }