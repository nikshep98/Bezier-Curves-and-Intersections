from collections import deque

class BezierCurve:
    RANGE_STEP = 1000

    def __init__(self):

        self.control_points = []
        self.curve = []
        self.derivative_control_points = []
        self.derivative = dict()
        self.subdivision_left = dict()
        self.subdivision_right = dict()
        
    def append_point(self, point):

        self.control_points.append(point)
        self._nullify()

    def _deCasteljau_algorithm(self, param, points):

        algr_step = []
        algr_step.append([point for point in points])
        degree = len(points)
        subdiv_last = []
        self.subdivision_left[param] = []
        self.subdivision_right[param] = deque()
        for step in range(1, degree):
            algr_step.append([(1 - param) * algr_step[step - 1][point] + param * algr_step[step - 1][point + 1] for point in range(len(algr_step[step - 1]) - 1)])

            self.subdivision_left[param].append(algr_step[step - 1][0])
            self.subdivision_right[param].appendleft(algr_step[step - 1]
                                                              [degree - step])

        algorithm_result = algr_step[degree - 1][0]
        self.subdivision_left[param].append(algorithm_result)
        self.subdivision_right[param].appendleft(algorithm_result)

        return algorithm_result

    def _curve_calculation(self, control_points, derivative=None):

        key = len(self.control_points) - len(control_points)
        self.derivative[key] = []

        for t in range(self.RANGE_STEP + 1):
            parameter = t / self.RANGE_STEP

            if derivative:
                self.derivative[key].append(self._deCasteljau_algorithm(parameter, control_points))

            else:
                self.curve.append(self._deCasteljau_algorithm(parameter, control_points))